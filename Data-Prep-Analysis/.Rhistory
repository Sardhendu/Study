head(lbw)
set.seed(632)
x <- scale( cbind(x1,x2,x3,x4,x5,x6) )
lbw <- within(lbw, {
## race relabeling
race.cat <- factor(race, levels = 1:3, labels = c("White","Black","Other"))
## ftv (frequency of visit) relabeling
ftv.cat <- cut(ftv, breaks = c(-Inf, 0, 2, Inf), labels = c("None","Normal","Many"))
ftv.cat <- relevel(ftv.cat, ref = "Normal")
## ptl
preterm <- factor(ptl >= 1, levels = c(F,T), labels = c("0","1+"))
})
formulaStr <- 'bwt ~ age + lwt + race.cat + smoke + preterm + ht + ui + ftv.cat'
formula <- as.formula(formulaStr)
lm.full <- lm(formula, data = lbw)
lm.null <- lm(bwt ~ 1, data = lbw)
summary(lm.full)
summary(lm.null)
plot(lm.full)
plot(lm.null)
alpha <- .01
summary(lm.full)
tValues <- summary(lm.full)$coefficients[,4]
tValues
tValues <- sort(tValues, decreasing = TRUE)
tValues
varToDrop <- names(tValues[1])
varToDrop
dropVarFromFormula <- function(formulaStr, dropVar){
return(as.formula(paste0(formulaStr, ' - ', dropVar)))
}
newModelFormula <- dropVarFromFormula(formulaStr, dropVar = varToDrop)
newModel <- lm(newModelFormula, data = lbw)
summary(newModel)
drop1(update(lm.full, ~ . -age), test = "F")
drop1(update(lm.full, ~ . -age -ftv.cat), test = "F")
library(class)
library(MASS)
library(Hmisc)
library(klaR)
library(e1071)
library(kknn)
library(rpart)
library(boost)
library(mvtnorm)
library(multinomRob)
library(lars)
library(stats)
library(leaps)
install.packages('klaR')
install.packages('kknn')
install.packages('boost')
install.packages('lars')
install.packages('multinomRob')
library(class)
library(MASS)
library(Hmisc)
library(klaR)
library(e1071)
library(kknn)
library(rpart)
library(boost)
library(mvtnorm)
library(multinomRob)
library(lars)
library(stats)
library(leaps)
set.seed(632)
x1 <- runif(50, 0, 1)
x2 <- x1 + rnorm(50, 0, 0.25)
x3 <- (x1 + x2)/2 + runif(50, 0, 0.1)
x4 <- runif(50, 0, 1)
x5 <- (2*x4 + rnorm(50, 0, 0.25))/2 + runif(50, 0, 0.1)
x6 <- runif(50, 0, 1)
y <- (3 + x1 + x2 + 0.5*x3 + 0.75*x4 + 0.5*x5 + 0.5*x6 + rnorm(50, 0, 1))
x
?scale
x <- scale( cbind(x1,x2,x3,x4,x5,x6) )
x
trdata <- data.frame( cbind(x,y) )
names(trdata) <- c("sx1", "sx2", "sx3", "sx4", "sx5", "sx6", "y")
attach(trdata)
cor(trdata)
ols1 <- lm(y ~ sx1 + sx2 + sx3 + sx4 + sx5 + sx6)
summary(ols1)
ols2 <- lm(y ~ sx1 + sx2 + sx3 + sx4 + sx5)
summary(ols2)
ols3 <- lm(y ~ sx1 + sx2 + sx3 + sx5)
summary(ols3)
ols4 <- lm(y ~ sx1 + sx3 + sx5)
summary(ols4)
ols5 <- lm(y ~ sx1 + sx5)
summary(ols5)
ols6 <- step(ols1, direction="both")
summary(ols6)
las <- lars(x, y, type="lasso")
las
plot(las, plottype="coefficients")
x1 <- runif(50, 0, 1)
x2 <- x1 + rnorm(50, 0, 0.25)
x3 <- (x1 + x2)/2 + runif(50, 0, 0.1)
x4 <- runif(50, 0, 1)
x5 <- (2*x4 + rnorm(50, 0, 0.25))/2 + runif(50, 0, 0.1)
x6 <- runif(50, 0, 1)
y <- (3 + x1 + x2 + 0.5*x3 + 0.75*x4 + 0.5*x5 + 0.5*x6 + rnorm(50, 0, 1))
x <- scale( cbind(x1,x2,x3,x4,x5,x6) )
trdata <- data.frame( cbind(x,y) )
names(trdata) <- c("sx1", "sx2", "sx3", "sx4", "sx5", "sx6", "y")
attach(trdata)
cor(trdata)
las <- lars(x, y, type="lasso")
las
plot(las, plottype="coefficients")
set.seed(632)
x1 <- runif(50, 0, 1)
x2 <- x1 + rnorm(50, 0, 0.25)
x3 <- (x1 + x2)/2 + runif(50, 0, 0.1)
x4 <- runif(50, 0, 1)
x5 <- (2*x4 + rnorm(50, 0, 0.25))/2 + runif(50, 0, 0.1)
x6 <- runif(50, 0, 1)
y <- (3 + x1 + x2 + 0.5*x3 + 0.75*x4 + 0.5*x5 + 0.5*x6 + rnorm(50, 0, 1))
las <- lars(x, y, type="lasso")
las
plot(las, plottype="coefficients")
#
plot(las, plottype="Cp")
plot(las, plottype="coefficients")
set.seed(632)
x1 <- runif(50, 0, 1)
x2 <- x1 + rnorm(50, 0, 0.25)
x3 <- (x1 + x2)/2 + runif(50, 0, 0.1)
x4 <- runif(50, 0, 1)
x5 <- (2*x4 + rnorm(50, 0, 0.25))/2 + runif(50, 0, 0.1)
x6 <- runif(50, 0, 1)
y <- (3 + x1 + x2 + 0.5*x3 + 0.75*x4 + 0.5*x5 + 0.5*x6 + rnorm(50, 0, 1))
?scale
x <- scale( cbind(x1,x2,x3,x4,x5,x6) )
trdata <- data.frame( cbind(x,y) )
names(trdata) <- c("sx1", "sx2", "sx3", "sx4", "sx5", "sx6", "y")
attach(trdata)
cor(trdata)
las <- lars(x, y, type="lasso")
las
plot(las, plottype="coefficients")
plot(las, plottype="Cp")
cvlas <- cv.lars(x, y, type="lasso")
cvlas
cvlas$fraction
cvlas$fraction[which.min(cvlas$cv)]
which.min(cvlas$cv)
min(cvlas$cv)
frac <- cvlas$cv[which.min(cvlas$cv)]
frac
frac <- cvlas$fraction[which.min(cvlas$cv)]
frac
las.coef <- predict.lars(las, type="coefficients", mode="fraction", s=frac)
las.coef
las.coef
las.coef <- predict.lars(las, type="coefficients", mode="fraction", s=1)
las.coef
ols1
?model.matrix
?glmnet
install.packages('glmnet')
?glmnet
?plot.glmnet
??plot.glmnet
??plot.glmnet
require(gdata)
dataDir <- "/Users/sam/All-Program/App-DataSet/Study/Data-Prep-Analysis/default_of_credit_card_clients.xls"
df = read.xls (dataDir, sheet = 1, header = TRUE)
head(df)
dataDir <- "/Users/sam/All-Program/App-DataSet/Study/Data-Prep-Analysis/default_of_credit_card_clients.xls"
head(credit.data)
credit.data <- read.xls (dataDir, sheet = 1,skip=1, header = TRUE)
credit.data <- read.xls (dataDir, sheet = 1,skip=1, header = TRUE)
credit.data <- subset(credit.data, select=-c(ID))
head(credit.data)
credit.numericCols <- names(which(sapply(credit.data, is.numeric)))
credit.nominalCols <- names(which(sapply(credit.data, is.factor)))
print (nrow(credit.data))
print (ncol(credit.data))
print (credit.numericCols)
print (credit.nominalCols)
which(is.na(credit.data))
plot(credit.data)
require(gdata)
require(gdata)
library(caret)
library(ggplot2)
library(grid)
library(gridExtra)
dataDir <- "/Users/sam/All-Program/App-DataSet/Study/Data-Prep-Analysis/default_of_credit_card_clients.xls"
credit.data <- read.xls (dataDir, sheet = 1, skip=1, header = TRUE)
head(credit.data)
credit.data <- subset(credit.data, select=-c(ID))
head(credit.data)
colnames(credit.data)[24] <- "default"
uniqueCount <- function (feature){
return (length(unlist(unique(credit.data[feature]))))
}
sapply(colnames(credit.data), FUN=uniqueCount)
numericCols <- names(which(sapply(credit.data, is.numeric)))
nominalCols <- names(which(sapply(credit.data, is.factor)))
print (nrow(credit.data))
print (ncol(credit.data))
print (numericCols)
print (nominalCols)
which(is.na(credit.data))
changeDataType <- function(feature){
print (feature)
credit.data[[feature]] <- as.factor(as.character(credit.data[[feature]]))
}
credit.data$SEX <- as.factor(as.character(credit.data$SEX))
credit.data$EDUCATION <- as.factor(as.character(credit.data$EDUCATION))
credit.data$MARRIAGE <- as.factor(as.character(credit.data$MARRIAGE))
credit.data$PAY_0 <- as.factor(as.character(credit.data$PAY_0))
credit.data$PAY_2 <- as.factor(as.character(credit.data$PAY_2))
credit.data$PAY_3 <- as.factor(as.character(credit.data$PAY_3))
credit.data$PAY_4 <- as.factor(as.character(credit.data$PAY_4))
credit.data$PAY_5 <- as.factor(as.character(credit.data$PAY_5))
credit.data$PAY_6 <- as.factor(as.character(credit.data$PAY_6))
credit.numericCols <- names(which(sapply(credit.data, is.numeric)))
credit.nominalCols <- names(which(sapply(credit.data, is.factor)))
length(credit.numericCols)
length(credit.nominalCols)
set.seed(24287)
samplePrcntg <- 0.10
credit.sampleIndices <- createDataPartition(y = credit.data$default, p=samplePrcntg, list=FALSE)
credit.sample <- credit.data[credit.sampleIndices , ]
head(credit.sample)
nrow(credit.sample)
options(repr.plot.width=15, repr.plot.height=20)
plot(credit.sample[, credit.numericCols])
boxplot(as.data.frame(credit.sample)$PAY_AMT1, horizontal = TRUE,  main= BILL_AMT4)
credit.data <- as.data.frame(credit.data)
credit.data$SEX <- as.factor(as.character(credit.data$SEX))
credit.data$EDUCATION <- as.factor(as.character(credit.data$EDUCATION))
credit.data$MARRIAGE <- as.factor(as.character(credit.data$MARRIAGE))
credit.data$PAY_0 <- as.factor(as.character(credit.data$PAY_0))
credit.data$PAY_2 <- as.factor(as.character(credit.data$PAY_2))
credit.data$PAY_3 <- as.factor(as.character(credit.data$PAY_3))
credit.data$PAY_4 <- as.factor(as.character(credit.data$PAY_4))
credit.data$PAY_5 <- as.factor(as.character(credit.data$PAY_5))
credit.data$PAY_6 <- as.factor(as.character(credit.data$PAY_6))
credit.numericCols <- names(which(sapply(credit.data, is.numeric)))
credit.nominalCols <- names(which(sapply(credit.data, is.factor)))
length(credit.numericCols)
length(credit.nominalCols)
set.seed(24287)
samplePrcntg <- 0.10
credit.sampleIndices <- createDataPartition(y = credit.data$default, p=samplePrcntg, list=FALSE)
credit.sample <- credit.data[credit.sampleIndices , ]
head(credit.sample)
nrow(credit.sample)
options(repr.plot.width=15, repr.plot.height=20)
boxplot(as.data.frame(credit.sample)$PAY_AMT1, horizontal = TRUE,  main= BILL_AMT4)
colnames(credit.sample)
credit.sample[1]
boxplot(credit.sample[1], horizontal = TRUE,  main= BILL_AMT4)
boxplot(credit.sample[1], horizontal = TRUE,  main= 'BILL_AMT4')
boxplot(credit.sample[1], horizontal = TRUE,  main= 'BILL_AMT4')
dev.off()
boxplot(credit.sample[1], horizontal = TRUE,  main= 'BILL_AMT4')
rm(list = ls())
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data"
datum <- read.table(url, header=FALSE)
autoMPG.datum <- data.frame(datum)
head(autoMPG.datum)
featureNames <- c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin", "car_name")
names(autoMPG.datum) <- featureNames
autoMPG.orig_numericCols <- names(which(sapply(autoMPG.datum, is.numeric)))
autoMPG.orig_numericCols
autoMPG.orig_factorCols <- names(which(sapply(autoMPG.datum, is.factor)))
autoMPG.orig_factorCols
uniqueCount <- function (feature){
print (length(unlist(unique(autoMPG.datum[feature]))))
}
sapply(featureNames, FUN=uniqueCount)
autoMPG.datumVarDtype <- autoMPG.datum
autoMPG.datumVarDtype$mpg <- as.numeric(as.character(autoMPG.datum$mpg))
autoMPG.datumVarDtype$displacement <- as.numeric(as.character(autoMPG.datum$displacement))
autoMPG.datumVarDtype$horsepower <- as.numeric(as.character(autoMPG.datum$horsepower))
autoMPG.datumVarDtype$weight <- as.numeric(as.character(autoMPG.datum$weight))
autoMPG.datumVarDtype$acceleration <- as.numeric(as.character(autoMPG.datum$acceleration))
autoMPG.datumVarDtype$cylinders <- as.factor(as.character(autoMPG.datum$cylinders))
autoMPG.datumVarDtype$model_year <- as.factor(as.character(autoMPG.datum$model_year))
autoMPG.datumVarDtype$origin <- as.factor(as.character(autoMPG.datum$origin))
head(autoMPG.datumVarDtype)
autoMPG.datumClean <- autoMPG.datumVarDtype
autoMPG.datumClean$car_name <- NULL
head(autoMPG.datumClean)
sapply(autoMPG.datumClean, class)
autoMPG.datumCleanAlias <- autoMPG.datumClean
library(ggplot2)
library(grid)
library(gridExtra)
autoMPG.numericCols <- c("mpg", "displacement", "horsepower", "weight", "acceleration")
autoMPG.discreteCols <- c("cylinders", "model_year", "origin")
summary(autoMPG.datumClean)
dev.off()
par(mfrow=c(2,3))
autoMPG.crearteBoxPlots <- function (column_name, dataIN){
boxplot(dataIN[column_name], horizontal = TRUE,  main= column_name)
stripchart(dataIN[column_name], add = TRUE, pch = 20, col = 'red')
}
sapply(autoMPG.numericCols, FUN=autoMPG.crearteBoxPlots, dataIN=autoMPG.datumClean)
dev.off()
plot(autoMPG.datumClean[, autoMPG.numericCols])
library(reshape2)
dev.off()
ggplot(data = melt(autoMPG.datumClean), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
datumClean_alias <- autoMPG.datumClean[, autoMPG.discreteCols]
discreteColTable <- sqldf("select 'cylinders' as feature, cylinders as category, count(cylinders) as count from datumClean_alias group by cylinders union select 'model_year' as feature, model_year as category, count(model_year) as count from datumClean_alias group by model_year union select 'origin' as feature, origin as category, count(origin) as count from datumClean_alias group by origin")
dev.off()
par(mfrow=c(2,2))
barPlots <- function(featureVector, dataIN){
tab <- table(dataIN[featureVector])
barplot(tab, main=featureVector, xlab="Feature Categories")
}
sapply(autoMPG.discreteCols, FUN=barPlots, autoMPG.datumClean)
dev.off()
par(mfrow=c(3,2))
levels(autoMPG.datumClean$cylinders)
autoMPG.cylinder3 <- autoMPG.datumClean[which(autoMPG.datumClean$cylinders == 3), ]
sapply(autoMPG.numericCols, FUN=autoMPG.crearteBoxPlots, dataIN=autoMPG.cylinder3)
dev.off()
par(mfrow=c(3,2))
autoMPG.cylinder4 <- autoMPG.datumClean[which(autoMPG.datumClean$cylinders == 4), ]
sapply(autoMPG.numericCols, FUN=autoMPG.crearteBoxPlots, dataIN=autoMPG.cylinder4)
dev.off()
par(mfrow=c(3,2))
autoMPG.cylinder5 <- autoMPG.datumClean[which(autoMPG.datumClean$cylinders == 5), ]
sapply(autoMPG.numericCols, FUN=autoMPG.crearteBoxPlots, dataIN=autoMPG.cylinder5)
dev.off()
par(mfrow=c(2,3))
autoMPG.cylinder6 <- autoMPG.datumClean[which(autoMPG.datumClean$cylinders == 6), ]
sapply(autoMPG.numericCols, FUN=autoMPG.crearteBoxPlots, dataIN=autoMPG.cylinder6)
dev.off()
par(mfrow=c(3,2))
autoMPG.cylinder8 <- autoMPG.datumClean[which(autoMPG.datumClean$cylinders == 8), ]
sapply(autoMPG.numericCols, FUN=autoMPG.crearteBoxPlots, dataIN=autoMPG.cylinder8)
dev.off()
par(mfrow=c(2,3))
levels(autoMPG.datumClean$origin)
autoMPG.origin1 <- autoMPG.datumClean[which(autoMPG.datumClean$origin == 1), ]
sapply(autoMPG.numericCols, FUN=autoMPG.crearteBoxPlots, dataIN=autoMPG.origin1)
dev.off()
par(mfrow=c(2,3))
levels(autoMPG.datumClean$origin)
autoMPG.origin2 <- autoMPG.datumClean[which(autoMPG.datumClean$origin == 2), ]
sapply(autoMPG.numericCols, FUN=autoMPG.crearteBoxPlots, dataIN=autoMPG.origin2)
dev.off()
par(mfrow=c(2,3))
levels(autoMPG.datumClean$origin)
autoMPG.origin3 <- autoMPG.datumClean[which(autoMPG.datumClean$origin == 3), ]
sapply(autoMPG.numericCols, FUN=autoMPG.crearteBoxPlots, dataIN=autoMPG.origin3)
library(ggplot2)
library(corrplot)
autoMPG.datumCleanNumeric <- autoMPG.datumClean[,autoMPG.numericCols]    # Fetching the data frame with only numeric columns
autoMPG.cor_matrix <- cor(na.omit(autoMPG.datumCleanNumeric))         # Building the correlation plot
dev.off()                                       # Closes all the previous plot windows
corrplot(autoMPG.cor_matrix, method="number")
colnames(autoMPG.datumClean)[colSums(is.na(autoMPG.datumClean)) > 0]
summary(autoMPG.datumClean$horsepower)
library(dplyr)
library(plyr)
cleanData <- function (data_in, NA_column, column_wrt, replaceType='avg', cleanType='replace'){
data_NA <- subset(data_in, is.na(data_in[NA_column]))
data_NotNA <- setdiff(data_in, data_NA)
if (cleanType=='remove'){
return (data_NotNA)
}
else if (cleanType=='replace'){
# Find the median of the horsepower column given the column_wrt
unq_vals <- unique(data_NA[column_wrt])
query <- sprintf("select cylinders, %s(%s) as nwHP from data_NotNA group by cylinders having cylinders in unq_vals", replaceType, NA_column)
newMedianTable <- sqldf(query)
for (cylinder_num in newMedianTable[column_wrt][,]){
data_NA[data_NA[column_wrt] == cylinder_num , ][NA_column] <- newMedianTable[newMedianTable[column_wrt] == cylinder_num ,]["nwHP"]
}
return (rbind.fill(data_NotNA,data_NA))
}
else{
return (NULL)
}
}
autoMPG.datumClean <- cleanData(autoMPG.datumCleanAlias,
'horsepower',
'cylinders',
replaceType='avg',
cleanType='remove')
dim(autoMPG.datumClean)
stopifnot(dim(autoMPG.datumClean) == dim(autoMPG.datumCleanAlias))
stopifnot(sum(is.na(autoMPG.datumClean)) == 0)
library('caret')
trainPrcnt <- 0.8
testPrnct <- 0.2
set.seed(32455)
trainIndices <- createDataPartition(y = autoMPG.datumClean$mpg, p = trainPrcnt, list = FALSE)
autoMPG.trainData <- autoMPG.datumClean[trainIndices,]
autoMPG.testData <- autoMPG.datumClean[-trainIndices,]
stopifnot(nrow(autoMPG.trainData) + nrow(autoMPG.testData) == nrow(autoMPG.datumClean))
head(autoMPG.trainData)
dim(autoMPG.trainData)
head(autoMPG.testData)
dim(autoMPG.testData)
autoMPG.trainDataNumeric <- autoMPG.trainData[, autoMPG.numericCols]
autoMPG.testDataNumeric <- autoMPG.testData[, autoMPG.numericCols]
summary(autoMPG.trainDataNumeric)
summary(autoMPG.testDataNumeric)
dev.off()
par(mfrow=c(2,2))
plot(mpg~displacement, autoMPG.trainDataNumeric)
plot(mpg~horsepower, autoMPG.trainDataNumeric)
plot(mpg~weight, autoMPG.trainDataNumeric)
plot(mpg~acceleration, autoMPG.trainDataNumeric)
autoMPG.numeric.model.lin <- lm(mpg~displacement + horsepower + weight + acceleration, data=autoMPG.trainDataNumeric)
summary(autoMPG.numeric.model.lin)
autoMPG.testDataNumeric$mpg_hat <- predict(autoMPG.numeric.model.lin, autoMPG.testDataNumeric)
autoMPG.testDataNumeric$residue <- autoMPG.testDataNumeric$mpg_hat - autoMPG.testDataNumeric$mpg
autoMPG.numeric.model.lin.SSE <- sum((autoMPG.testDataNumeric$residue)^2)
autoMPG.numeric.model.lin.SSR <- sum((autoMPG.testDataNumeric$mpg_hat - mean(autoMPG.testDataNumeric$mpg))^2)
autoMPG.numeric.model.lin.SST <- sum((autoMPG.testDataNumeric$mpg - mean(autoMPG.testDataNumeric$mpg))^2)
stopifnot(autoMPG.numeric.model.lin.SSE + autoMPG.numeric.model.lin.SSR == autoMPG.numeric.model.lin.SST)
autoMPG.numeric.model.r_sq1 <- autoMPG.numeric.model.lin.SSR / autoMPG.numeric.model.lin.SST
autoMPG.numeric.model.r_sq1
autoMPG.numeric.model.r_sq2 <- autoMPG.numeric.model.lin.SSR / (autoMPG.numeric.model.lin.SSE+autoMPG.numeric.model.lin.SSR)
autoMPG.numeric.model.r_sq2
getSignificantFeatures <- function(inputSummary, dependent, alpha){
signFeatureIndice <- which(inputSummary['Pr(>|t|)']<=alpha)
signFeatureIndice <- signFeatureIndice[signFeatureIndice!=1]   # remove the intercept column
return (c(row.names(inputSummary[signFeatureIndice,]), dependent))
}
significantFeatures <- getSignificantFeatures(as.data.frame(summary(autoMPG.numeric.model.lin)$coefficients), dependent="mpg", alpha=0.05)
autoMPG.trainDataNumericSignificant <- autoMPG.trainDataNumeric[significantFeatures]
autoMPG.testDataNumericSignificant <- autoMPG.testDataNumeric[significantFeatures]
autoMPG.numeric.model2.lin <- lm(mpg~horsepower + weight,  data=autoMPG.trainDataNumericSignificant)
summary(autoMPG.numeric.model2.lin)
autoMPG.testDataNumericSignificant$mpg_hat <- predict(autoMPG.numeric.model2.lin, autoMPG.testDataNumericSignificant)
autoMPG.testDataNumericSignificant$residue <- autoMPG.testDataNumericSignificant$mpg_hat - autoMPG.testDataNumericSignificant$mpg
autoMPG.numeric.model2.lin.SSE <- sum((autoMPG.testDataNumericSignificant$residue)^2)
autoMPG.numeric.model2.lin.SSR <- sum((autoMPG.testDataNumericSignificant$mpg_hat - mean(autoMPG.testDataNumericSignificant$mpg))^2)
autoMPG.numeric.model2.lin.SST <- sum((autoMPG.testDataNumericSignificant$mpg - mean(autoMPG.testDataNumericSignificant$mpg))^2)
stopifnot(autoMPG.numeric.model2.lin.SSE + autoMPG.numeric.model2.lin.SSR == autoMPG.numeric.model2.lin.SST)
autoMPG.numeric.model2.r_sq1 <- autoMPG.numeric.model2.lin.SSR / autoMPG.numeric.model2.lin.SST
autoMPG.numeric.model2.r_sq1
autoMPG.numeric.model2.r_sq2 <- autoMPG.numeric.model2.lin.SSR / (autoMPG.numeric.model2.lin.SSE + autoMPG.numeric.model2.lin.SSR)
autoMPG.numeric.model2.r_sq2
autoMPG.datumVarDtypeClean <- na.omit(autoMPG.datumVarDtype)
autoMPG.dataBad <- autoMPG.datumVarDtypeClean#[significantFeatures]
colnames(autoMPG.dataBad)
autoMPG.trainDataBad <- autoMPG.dataBad[trainIndices,]
autoMPG.trainDataBad$car_name <- autoMPG.datumVarDtypeClean$car_name[trainIndices]
autoMPG.testDataBad <- autoMPG.dataBad[-trainIndices,]
autoMPG.testDataBad$car_name <- autoMPG.datumVarDtypeClean$car_name[-trainIndices]
stopifnot(nrow(autoMPG.trainDataBad) + nrow(autoMPG.testDataBad) == nrow(autoMPG.datumVarDtypeClean))
yVariable <- "mpg"
xVariables <- c(names(autoMPG.trainDataBad))
xVariables <- xVariables[xVariables!= yVariable]
autoMPG.bad.model <- as.formula(paste(yVariable, "~", paste(xVariables, collapse = '+ ')))
autoMPG.bad.model.lin <- lm(autoMPG.bad.model, data=autoMPG.trainDataBad)
summary(autoMPG.bad.model.lin)
autoMPG.testDataBad$mpg_hat <- predict(autoMPG.bad.model.lin, autoMPG.testDataBad)
xVariables <- xVariables[xVariables!= "car_name"]
autoMPG.fixed.model <- as.formula(paste(yVariable, "~", paste(xVariables, collapse = '+ ')))
autoMPG.fixed.model.lin <- lm(autoMPG.fixed.model, data=autoMPG.trainDataBad)
summary(autoMPG.fixed.model.lin)
autoMPG.testDataFixed <- autoMPG.testDataBad
autoMPG.testDataFixed$car_name <- NULL                    # We dont need to do this (this is just redundant use of memory), this is just done for the continuity of the variables
autoMPG.testDataFixed$mpg_hat <- predict(autoMPG.fixed.model.lin, autoMPG.testDataFixed)
autoMPG.testDataFixed$residue <- autoMPG.testDataFixed$mpg_hat - autoMPG.testDataFixed$mpg
autoMPG.fixed.model.lin.SSE <- sum((autoMPG.testDataFixed$residue)^2)
autoMPG.fixed.model.lin.SSR <- sum((autoMPG.testDataFixed$mpg_hat - mean(autoMPG.testDataFixed$mpg))^2)
autoMPG.fixed.model.lin.SST <- sum((autoMPG.testDataFixed$mpg - mean(autoMPG.testDataFixed$mpg))^2)
stopifnot(autoMPG.fixed.model.lin.SSE + autoMPG.fixed.model.lin.SSR == autoMPG.fixed.model.lin.SST)
autoMPG.fixed.model.r_sq1 <- autoMPG.fixed.model.lin.SSR / autoMPG.fixed.model.lin.SST
autoMPG.fixed.model.r_sq1
autoMPG.fixed.model.r_sq2 <- autoMPG.fixed.model.lin.SSR/(autoMPG.fixed.model.lin.SSR + autoMPG.fixed.model.lin.SSE)
autoMPG.fixed.model.r_sq2
regression.Model <- lm(autoMPG.datumClean$mpg~autoMPG.datumClean$model_year)
summary(regression.Model)
summary(autoMPG.fixed.model.lin)
library(sqldf)
aliasDatumVarDtype <- autoMPG.datumVarDtype
groupTable <- sqldf("select model_year, count(mpg) as count, min(mpg) as min, max(mpg) as max, max(mpg)-min(mpg) as range from aliasDatumVarDtype group by model_year")
groupTable
modelYear <- as.integer(as.character(autoMPG.datumVarDtype$model_year))
dev.off()
plot(modelYear, autoMPG.datumVarDtype$mpg)
head(as.data.frame(c(modelYear,autoMPG.datumVarDtype$mpg)))
library(dplyr)
autoMPG.datumClean$mpgQuartile <- ntile(autoMPG.datumClean$mpg, 4)
tbl <- table(autoMPG.datumClean$mpgQuartile, autoMPG.datumClean$model_year)
chisq.test(tbl)
buildModel <- function(model, trainDataIN, testDataIN){
linFit <- lm(model, data=trainDataIN)
y_hat <- predict(linFit, testDataIN)
residue <- y_hat - testDataIN$mpg
SSE <- sum((residue)^2)
SSR <- sum((y_hat - mean(testDataIN$mpg))^2)
SST <- sum((testDataIN$mpg - mean(testDataIN$mpg))^2)
SST2 <- SSE + SSR
return (list(linFit, y_hat, residue, SSE, SSR, SST, SST2))
}
colnames(trainDataIN)
trainDataIN
colnames(autoMPG.trainDataNew)
colnames(autoMPG.trainData)
colnames(autoMPG.trainDataBad)
autoMPG.bad.model
