?sapply
myName <- 'Sardhendu Mishra'
myEmail <- 'smishra13@hawk.iit.edu'
myVector <- c(100:10000)
q2Sum <- sum(myVector)
q2Min <- min(myVector)
q2Max <- max(myVector)
q2Median <- median(myVector)
divis = function(inp_num, div_by=127){
if (inp_num%%div_by == 0){
return (TRUE)
}
else{
return (FALSE)
}
}
divis(127*5)
divis(80)
countDivis <- sum(sapply(myVector, FUN=divis))
countDivis
names <- c("Kermit Chacko",
"Eleonore Chien",
"Genny Layne",
"Willene Chausse",
"Taylor Lyttle",
"Tillie Vowell",
"Carlyn Tisdale",
"Antione Roddy",
"Zula Lapp",
"Delphia Strandberg",
"Barry Brake",
"Warren Hitchings",
"Krista Alto",
"Stephani Kempf",
"Sebastian Esper",
"Mariela Hibner",
"Torrie Kyler")
tail(strsplit(names[9], " ")[[1]], n=1)
ninthLastName <- names[-1:-(length(names)-9)]
ninthLastName <- tail(strsplit(names[9], " ")[[1]], n=1)
ninthLastName
nineLastNames <- names[-1:-(length(names)-9)]
nineLastNames
names
strsplit(names[9], " ")
strsplit(names, " ")
strsplit(names, " ")[[1:15]]
sapply(strsplit(names, " "), FUN=-1)
sapply(strsplit(names, " "), FUN='{')
sapply(strsplit(names, " "), FUN='[')
names <- c("Kermit Chacko",
"Eleonore Chien",
"Genny Layne",
"Willene Chausse",
"Taylor Lyttle",
"Tillie Vowell",
"Carlyn Tisdale",
"Antione Roddy",
"Zula Lapp",
"Delphia Strandberg",
"Barry Brake",
"Warren Hitchings",
"Krista Alto",
"Stephani Kempf",
"Sebastian Esper",
"Mariela Hibner",
"Torrie Kyler",
"lala iuiu Lkok")
sapply(strsplit(names, " "), FUN='[')
sapply(strsplit(names, " "), FUN='[[')
sapply(strsplit(names, " "), FUN='[')
sapply(tail(strsplit(names, " "), n=1), FUN='[')
tail(strsplit(names, " "), n=1)
sapply(strsplit(names, " "), FUN=tail)
tail(sapply(strsplit(names, " "), FUN='['))
tail(sapply(strsplit(names, " "), FUN='['), n=1)
sapply(strsplit(names, " "), FUN=tail(n=1))
strsplit(names, " ")
sapply(strsplit(names, " "))
sapply(strsplit(names, " "), FUN='[')
sapply(strsplit(names, " "), FUN='[[')
sapply(strsplit(names, " "), FUN=tail(names, n=1))
sapply(strsplit(names, " "), FUN=tail(names, n=1))
sapply(strsplit(names, " "), FUN=[1])
sapply(strsplit(names, " "), FUN='[1]')
sapply(strsplit(names, " "), FUN=' ')
sapply(strsplit(names, " "), FUN='+1')
sapply(strsplit(names, " "), FUN=+'ee')
sapply(strsplit(names, " "), FUN=+'ee')
sapply(3:9, seq)
sapply(strsplit(names, " "), seq)
sapply(strsplit(names, " "), len)
sapply(strsplit(names, " "), length)
sapply(strsplit(names, " "), tail)
sapply(strsplit(names, " "), tail=1)
sapply(strsplit(names, " "), tail(1))
sapply(strsplit(names, " "), tail[1]
)
sapply(strsplit('ZYY-43S-CWA3', "-"), '[', 1)
sapply(strsplit(names," "), '[', 1)
sapply(strsplit(names," "), '[', -1:-2)
sapply(strsplit(names," "), '[', -1:0)
sapply(strsplit(names," "), '[', -1:length
)
sapply(strsplit(names," "), '[', tail)
sapply(strsplit(names," "), function(a), tail(a, n=1))
"ZYY-43S-CWA3"
id = "ZYY-43S-CWA3"
id <- "ZYY-43S-CWA3"
sapply(strsplit(id, "-"), function(a) a[1])
sapply(strsplit(names," "), function(a) tail(a, n=1)
)
countLastNameStartsWithL <- sapply(strsplit(names," "), function(a) tail(a, n=1))
countLastNameStartsWithL
nameMap = sapply(strsplit(names, " "), function(a) a[2])
names(nameMap) = sapply(strsplit(names, " "), fuction(a) a[1])
names(nameMap) = sapply(strsplit(names, " "), function(a) a[1])
nameMap["Krista"]
nameMap = sapply(strsplit(names, " "), function(a) tail(a, n=1)) # extracts all the last name
names(nameMap) = sapply(strsplit(names, " "), function(a) a[1]) # extracts all the first name and map it to the last name
nameMap["Krista"]
nameMap <- sapply(strsplit(names, " "), function(a) c(a[1], tail(a, n=1))) # extracts all the last name
nameMap
nameMap["Krista"]
nameMap[1[]
nameMap[1[]]
nameMap[1]
nameMap[2]
dict_namemap <- sapply(strsplit(names, " "), function(a) c(a[1], tail(a, n=1))) # extracts all the last name
dict_namemap
dict_namemap[,1]
dict_namemap[1,]
nameMap <- dict_namemap[,1]
names(nameMap) <- dict_namemap[1,]
nameMap
nameMap <- dict_namemap[2,]
names(nameMap) <- dict_namemap[1,]
nameMap
nameMap["Krista"]
dict_namemap <- sapply(strsplit(names, " "), function(a) c(a[1], tail(a, n=1))) # extracts all the last name
nameMap <- dict_namemap[2,]
names(nameMap) <- dict_namemap[1,]
nameMap["Krista"]
data <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data", sep=',')
data <- data.frame(data=data)
head(data)
colnames(data) = c('age','workclass','fnlwgt','education','education-num','marital-status','occupation','relationship','race','sex','capital-gain','capital-loss','hours-per-week', 'native-country','incomeLevel')
head(data)
sapply(data["workclass"], is.factor)
n = data.frame(data=c(' a', ' b', ' c'))
n
colnames(n) = c('abc')
n
sapply(n['abc'], as.factor)
sapply(n['abc'], is.factor)
n = data.frame(data=c(' a', ' b', ' c'))
n <- data.frame(data=c(' a', ' b', ' c'))
colnames(n) = c('abc')
sapply(n['abc'], is.factor)
sapply(n['abc'], as.character)
sapply(n['abc'], function(a) as.character(a))
sapply(n['abc'], function(a) if(as.character(a)==' a') return (TRUE) )
n_1 <- lapply(n["abc"], as.character)
n_1
n_1$abc
n_1$abc == " a"
sapply(n_1$abc, function(a) trim(a)=="a")
sapply(n_1$abc, function(a) trim(a)=="a")
trim("   Remove leading and trailing blanks    ")
library(gdata)
install.packages('gdata')
trim("   Remove leading and trailing blanks    ")
library(gdata)
trim("   Remove leading and trailing blanks    ")
trim(n_1$abc)
trim(n_1$abc)=="a"
n <- data.frame(data=c(' a', ' b', ' c'))
colnames(n) = c('abc')
n$abc
trim(n$abc)=="a"
trim(n_1$abc)==gov
gov <- c("a", "b")
trim(n$abc)==gov
match(gov, trim(n$abc))
n
n[2]
n["abc", 2]
n[abc, 2]
n[, 2]
n[2,"abc"]
n[2,"bac"] = 'popo'
n
strmat = match(gov, trim(n$abc))
strmat
library(gdata)
n <- data.frame(data=c(' a', ' b', ' c'))
colnames(n) = c('abc')
gov <- c("a", "b")
strmat = match(gov, trim(n$abc))
n[strmat, 'bac'] <- 'koko'
n
unq_workclass = unique(data['workclass'])
unq_workclass
library(gdata)
unq_workclass = unique(data['workclass'])
gov <- c('State-gov', 'Federal-gov', 'Local-gov')
self <- c('Self-emp-not-inc', 'Self-emp-inc')
prv <- c('Private')
gov_indx = match(gov, trim(data$workclass))
self_indx = match(gov, trim(data$workclass))
prv_indx = match(gov, trim(data$workclass))
gov_indx
self_indx = match(gov, trim(data$workclass))
self_indx
library(gdata)
unq_workclass = unique(data['workclass'])
gov <- c('State-gov', 'Federal-gov', 'Local-gov')
self <- c('Self-emp-not-inc', 'Self-emp-inc')
prv <- c('Private')
gov_indx = match(gov, trim(data$workclass))
self_indx = match(self, trim(data$workclass))
prv_indx = match(prv, trim(data$workclass))
gov_indx
self_indx
prv_indx
sqldf("select count(1) from data where trim(workclass) in ('State-gov', 'Federal-gov', 'Local-gov')")
library(sqldf)
sqldf("select count(1) from data where trim(workclass) in ('State-gov', 'Federal-gov', 'Local-gov')")
sqldf("select rownum() from data where trim(workclass) in ('State-gov', 'Federal-gov', 'Local-gov')")
sqldf("select row_number() from data where trim(workclass) in ('State-gov', 'Federal-gov', 'Local-gov')")
sqldf("select ROW_NUMBER() from data where trim(workclass) in ('State-gov', 'Federal-gov', 'Local-gov')")
gov
trim(data$workclass)
match(gov, trim(data$workclass))
gov_indx = trim(data$workclass)) = gov
gov_indx = trim(data$workclass) = gov
gov_indx = trim(data$workclass) == gov
trim(data$workclass) == gov
gov_indx = trim(data$workclass) == gov
gov_indx
self_indx <- matchall(self, trim(data$workclass))
x <- c(1,1,2,2,3,3,4,4)
match(x, c(2,3))
which(!is.na(match(x, c(2,3))))
gov_indx <- which(!is.na(match(trim(data$workclass), gov)))
gov_indx
lenght(gov_indx)
sqldf("select ROW_NUMBER() from data where trim(workclass) in ('State-gov', 'Federal-gov', 'Local-gov')")
sqldf("select count(1) from data where trim(workclass) in ('State-gov', 'Federal-gov', 'Local-gov')")
gov_indx <- which(!is.na(match(trim(data$workclass), gov)))
self_indx <- which(!is.na(match(trim(data$workclass), self)))
prv_indx <- which(!is.na(match(trim(data$workclass), prv)))
gov_indx
self_indx
prv_indx
gov_indx == self_indx
data[gov_indx, 'workSector'] <- 'government'
data[self_indx, 'workSector'] <- 'selfEmployed'
data[prv_indx, 'workSector'] <- 'Private'
data$workSector
which(!is.na(data$workSector))
which(!is.na(data$workSector)) = gov_indx
which(!is.na(data$workSector)) == gov_indx
which(!is.na(data$workSector)) == self_indx
data[which(!is.na(data$workSector)), 'workSector'] <- 'Other'
data['workSector']
data[gov_indx, 'workSector'] <- 'government'
data[self_indx, 'workSector'] <- 'selfEmployed'
data[prv_indx, 'workSector'] <- 'Private'
data[which(is.na(data$workSector)), 'workSector'] <- 'Other'
data$workSector
head(data)
sapply(data, class)
as.numeric(as.character(data$age))
age <- as.numeric(as.character(data$age))
age
hist(age)
head(data)
?tapply
sqldf("select hours-per-week from data")
sqldf("select data$hours-per-week from data")
sqldf("select hours_per_week from data")
data <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data", sep=',')
data <- data.frame(data=data)
colnames(data) = c('age','workclass','fnlwgt','education','education_num','marital_status','occupation','relationship','race','sex','capital_gain','capital_loss','hours_per_week', 'native_country','incomeLevel')
unq_workclass = unique(data['workclass'])
gov <- c('State-gov', 'Federal-gov', 'Local-gov')
self <- c('Self-emp-not-inc', 'Self-emp-inc')
prv <- c('Private')
gov_indx <- which(!is.na(match(trim(data$workclass), gov)))
self_indx <- which(!is.na(match(trim(data$workclass), self)))
prv_indx <- which(!is.na(match(trim(data$workclass), prv)))
data[gov_indx, 'workSector'] <- 'government'
data[self_indx, 'workSector'] <- 'selfEmployed'
data[prv_indx, 'workSector'] <- 'Private'
data[which(is.na(data$workSector)), 'workSector'] <- 'Other'
head(data)
sqldf("select occupation from data groupby occupation")
sqldf("select occupation from data groupby(occupation)")
sqldf("select occupation from data group by occupation")
sqldf("select occupation, sum(hours_per_week) from data group by occupation")
sqldf("select occupation, avg(hours_per_week) from data group by occupation")
sqldf("select select occupation, avg(hours_per_week) from data group by occupation order by hours_per_week")
sqldf("select select occupation, avg(hours_per_week) as h_avg from data group by occupation order by h_avg")
sqldf("select occupation, avg(hours_per_week) as h_avg from data group by occupation order by h_av")
sqldf("select occupation, avg(hours_per_week) as h_avg from data group by occupation order by h_avg")
sqldf("select occupation, avg(hours_per_week) as h_avg from data group by occupation order by h_avg desc limit 5")
sqldf("select occupation into var, avg(hours_per_week) as h_avg from data group by occupation order by h_avg desc limit 5")
var <- sqldf("select occupation, avg(hours_per_week) as h_avg from data group by occupation order by h_avg desc limit 5")
var
var['occupation']
var <- sqldf("select occupation, avg(hours_per_week) as h_avg from data group by occupation order by h_avg desc limit 5")['occupation']
var
top_3_occp <- sqldf("select occupation, avg(hours_per_week) as h_avg from data group by occupation order by h_avg desc limit 3")['occupation']
top_3_occp
top3_Occup <- sqldf("select occupation, avg(hours_per_week) as h_avg from data group by occupation order by h_avg desc limit 3")['occupation']
top3_Occup
sqldf("select occupation, avg(hours_per_week) as h_avg from data group by occupation")
